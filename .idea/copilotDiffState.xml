<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.eslintrc.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.eslintrc.js" />
              <option name="updatedContent" value="// This file is now deprecated. Please use eslint.config.js with the flat config format.&#10;// ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/eslint.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/eslint.config.js" />
              <option name="updatedContent" value="import js from '@eslint/js';&#10;import reactRecommended from 'eslint-plugin-react/configs/recommended';&#10;import tseslintRecommended from '@typescript-eslint/eslint-plugin/dist/configs/recommended';&#10;&#10;// ...existing code...&#10;&#10;export default [&#10;  js,&#10;  reactRecommended,&#10;  tseslintRecommended,&#10;  {&#10;    files: ['**/*.ts', '**/*.tsx'],&#10;    languageOptions: {&#10;      parser: '@typescript-eslint/parser',&#10;      parserOptions: {&#10;        project: './tsconfig.json',&#10;      },&#10;    },&#10;    // ...your custom rules...&#10;    rules: {&#10;      // ...existing code...&#10;    },&#10;  },&#10;  // ...existing code...&#10;];&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/wedding-invite/components/KakaoMap.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/wedding-invite/components/KakaoMap.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import React, { useEffect, useRef, useState } from &quot;react&quot;;&#10;&#10;declare global { interface Window { kakao?: any; } }&#10;&#10;const SDK_ID = &quot;kakao-maps-sdk&quot;;&#10;&#10;function loadKakao(appKey?: string) {&#10;    return new Promise&lt;void&gt;((resolve, reject) =&gt; {&#10;        try {&#10;            if (typeof window === &quot;undefined&quot;) return;&#10;            if (window.kakao &amp;&amp; window.kakao.maps) return resolve();&#10;            const existing = document.getElementById(SDK_ID) as HTMLScriptElement | null;&#10;            if (existing) {&#10;                existing.addEventListener(&quot;load&quot;, () =&gt; window.kakao.maps.load(resolve));&#10;                return;&#10;            }&#10;            const script = document.createElement(&quot;script&quot;);&#10;            script.id = SDK_ID;&#10;            const key = appKey || process.env.NEXT_PUBLIC_KAKAO_JS_KEY;&#10;            const query = key ? `?appkey=${key}&amp;autoload=false` : &quot;?autoload=false&quot;;&#10;            script.src = `https://dapi.kakao.com/v2/maps/sdk.js${query}`;&#10;            script.async = true;&#10;            script.addEventListener(&quot;load&quot;, () =&gt; {&#10;                if (!window.kakao) return reject(new Error(&quot;Kakao not available&quot;));&#10;                window.kakao.maps.load(resolve);&#10;            });&#10;            script.addEventListener(&quot;error&quot;, () =&gt; reject(new Error(&quot;Failed to load Kakao SDK&quot;)));&#10;            document.head.appendChild(script);&#10;        } catch (e) { reject(e as any); }&#10;    });&#10;}&#10;&#10;export default function KakaoMap({ lat, lng, level = 3, marker = true, appKey }: {&#10;    lat: number; lng: number; level?: number; marker?: boolean; appKey?: string;&#10;}) {&#10;    const ref = useRef&lt;HTMLDivElement&gt;(null);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        let map: any; let mk: any;&#10;        loadKakao(appKey)&#10;            .then(() =&gt; {&#10;                if (!ref.current) return;&#10;                const center = new window.kakao.maps.LatLng(lat, lng);&#10;                map = new window.kakao.maps.Map(ref.current, { center, level });&#10;                if (marker) mk = new window.kakao.maps.Marker({ position: center, map });&#10;            })&#10;            .catch((e) =&gt; setError((e as Error).message));&#10;        return () =&gt; { if (mk) mk.setMap(null); if (map) map = null; };&#10;    }, [lat, lng, level, marker, appKey]);&#10;&#10;    if (error) return &lt;div className=&quot;h-60 w-full bg-gray-100 p-4 text-center text-sm text-red-600&quot;&gt;Map error: {error}&lt;/div&gt;;&#10;    return &lt;div ref={ref} className=&quot;h-60 w-full&quot; /&gt;;&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;import React, { useEffect, useRef, useState } from &quot;react&quot;;&#13;&#10;&#13;&#10;declare global { interface Window { kakao?: any; } }&#13;&#10;&#13;&#10;const SDK_ID = &quot;kakao-maps-sdk&quot;;&#13;&#10;&#13;&#10;function loadKakao(appKey?: string) {&#13;&#10;    return new Promise&lt;void&gt;((resolve, reject) =&gt; {&#13;&#10;        try {&#13;&#10;            if (typeof window === &quot;undefined&quot;) return;&#13;&#10;            if (window.kakao &amp;&amp; window.kakao.maps) return resolve();&#13;&#10;            const existing = document.getElementById(SDK_ID) as HTMLScriptElement | null;&#13;&#10;            if (existing) {&#13;&#10;                existing.addEventListener(&quot;load&quot;, () =&gt; window.kakao.maps.load(resolve));&#13;&#10;                return;&#13;&#10;            }&#13;&#10;            const script = document.createElement(&quot;script&quot;);&#13;&#10;            script.id = SDK_ID;&#13;&#10;            const key = appKey || process.env.NEXT_PUBLIC_KAKAO_JS_KEY;&#13;&#10;            const query = key ? `?appkey=${key}&amp;autoload=false` : &quot;?autoload=false&quot;;&#13;&#10;            script.src = `https://dapi.kakao.com/v2/maps/sdk.js${query}`;&#13;&#10;            script.async = true;&#13;&#10;            script.addEventListener(&quot;load&quot;, () =&gt; {&#13;&#10;                if (!window.kakao) return reject(new Error(&quot;Kakao not available&quot;));&#13;&#10;                window.kakao.maps.load(resolve);&#13;&#10;            });&#13;&#10;            script.addEventListener(&quot;error&quot;, () =&gt; reject(new Error(&quot;Failed to load Kakao SDK&quot;)));&#13;&#10;            document.head.appendChild(script);&#13;&#10;        } catch (e) { reject(e as any); }&#13;&#10;    });&#13;&#10;}&#13;&#10;&#13;&#10;export default function KakaoMap({ lat, lng, level = 3, marker = true, appKey }: {&#13;&#10;    lat: number; lng: number; level?: number; marker?: boolean; appKey?: string;&#13;&#10;}) {&#13;&#10;    const ref = useRef&lt;HTMLDivElement&gt;(null);&#13;&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#13;&#10;&#13;&#10;    useEffect(() =&gt; {&#13;&#10;        let map: any; let mk: any;&#13;&#10;        loadKakao(appKey)&#13;&#10;            .then(() =&gt; {&#13;&#10;                if (!ref.current) return;&#13;&#10;                const center = new window.kakao.maps.LatLng(lat, lng);&#13;&#10;                map = new window.kakao.maps.Map(ref.current, { center, level });&#13;&#10;                if (marker) mk = new window.kakao.maps.Marker({ position: center, map });&#13;&#10;            })&#13;&#10;            .catch((e) =&gt; setError((e as Error).message));&#13;&#10;        return () =&gt; { if (mk) mk.setMap(null); if (map) map = null; };&#13;&#10;    }, [lat, lng, level, marker, appKey]);&#13;&#10;&#13;&#10;    if (error) return &lt;div className=&quot;h-60 w-full bg-gray-100 p-4 text-center text-sm text-red-600&quot;&gt;Map error: {error}&lt;/div&gt;;&#13;&#10;    return (&#13;&#10;        &lt;div className=&quot;relative h-56 w-full bg-[linear-gradient(135deg,#2b2b2b,#000)] text-white flex items-center justify-center&quot;&gt;&#13;&#10;            &lt;div className=&quot;text-center text-xs&quot;&gt;&#13;&#10;                &lt;div className=&quot;text-[0.65rem] tracking-widest text-[#b1b1b1] mb-1&quot;&gt;MAP PLACEHOLDER&lt;/div&gt;&#13;&#10;                &lt;div&gt;Lat: {lat.toFixed(5)}&lt;/div&gt;&#13;&#10;                &lt;div&gt;Lng: {lng.toFixed(5)}&lt;/div&gt;&#13;&#10;                &lt;div className=&quot;mt-2 flex justify-center gap-2 text-[0.6rem] opacity-70&quot;&gt;&#13;&#10;                    &lt;span&gt;NEED KAKAO SDK&lt;/span&gt;&#13;&#10;                    &lt;span&gt;Â·&lt;/span&gt;&#13;&#10;                    &lt;span&gt;TO INTEGRATE&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;    );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>