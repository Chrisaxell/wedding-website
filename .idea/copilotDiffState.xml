<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env" />
              <option name="updatedContent" value="# Minimal env for Prisma CLI&#10;DATABASE_URL=postgresql://neondb_owner:npg_GKtXq0d9xLlB@ep-flat-field-agoksg0u-pooler.c-2.eu-central-1.aws.neon.tech/neondb?sslmode=require&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;wedding-website&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;next dev --turbopack&quot;,&#10;    &quot;build&quot;: &quot;next build --turbopack&quot;,&#10;    &quot;start&quot;: &quot;next start&quot;,&#10;    &quot;lint&quot;: &quot;eslint&quot;,&#10;    &quot;format&quot;: &quot;prettier . --write&quot;,&#10;    &quot;format:check&quot;: &quot;prettier . --check&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@prisma/client&quot;: &quot;^6.16.2&quot;,&#10;    &quot;@radix-ui/react-accordion&quot;: &quot;^1.2.12&quot;,&#10;    &quot;@radix-ui/react-dialog&quot;: &quot;^1.1.15&quot;,&#10;    &quot;@radix-ui/react-label&quot;: &quot;^2.1.7&quot;,&#10;    &quot;@radix-ui/react-slot&quot;: &quot;^1.2.3&quot;,&#10;    &quot;@radix-ui/react-tabs&quot;: &quot;^1.1.13&quot;,&#10;    &quot;class-variance-authority&quot;: &quot;^0.7.1&quot;,&#10;    &quot;clsx&quot;: &quot;^2.1.1&quot;,&#10;    &quot;date-fns&quot;: &quot;^4.1.0&quot;,&#10;    &quot;jose&quot;: &quot;^6.1.0&quot;,&#10;    &quot;lucide-react&quot;: &quot;^0.544.0&quot;,&#10;    &quot;next&quot;: &quot;15.5.4&quot;,&#10;    &quot;next-auth&quot;: &quot;^4.24.11&quot;,&#10;    &quot;next-intl&quot;: &quot;^4.3.9&quot;,&#10;    &quot;postcss&quot;: &quot;^8.5.6&quot;,&#10;    &quot;prettier&quot;: &quot;^3.6.2&quot;,&#10;    &quot;prettier-plugin-tailwindcss&quot;: &quot;^0.6.14&quot;,&#10;    &quot;prisma&quot;: &quot;^6.16.2&quot;,&#10;    &quot;react&quot;: &quot;19.1.0&quot;,&#10;    &quot;react-day-picker&quot;: &quot;^9.11.0&quot;,&#10;    &quot;react-dom&quot;: &quot;19.1.0&quot;,&#10;    &quot;tailwind&quot;: &quot;^4.0.0&quot;,&#10;    &quot;tailwind-merge&quot;: &quot;^3.3.1&quot;,&#10;    &quot;zod&quot;: &quot;^4.1.11&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@eslint/eslintrc&quot;: &quot;^3&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4.1.13&quot;,&#10;    &quot;@types/node&quot;: &quot;^20&quot;,&#10;    &quot;@types/react&quot;: &quot;^19&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^19&quot;,&#10;    &quot;eslint&quot;: &quot;^9&quot;,&#10;    &quot;eslint-config-next&quot;: &quot;15.5.4&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^4.1.13&quot;,&#10;    &quot;tw-animate-css&quot;: &quot;^1.4.0&quot;,&#10;    &quot;typescript&quot;: &quot;^5&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;wedding-website&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;next dev --turbopack&quot;,&#10;    &quot;build&quot;: &quot;next build --turbopack&quot;,&#10;    &quot;start&quot;: &quot;next start&quot;,&#10;    &quot;lint&quot;: &quot;eslint&quot;,&#10;    &quot;format&quot;: &quot;prettier . --write&quot;,&#10;    &quot;format:check&quot;: &quot;prettier . --check&quot;,&#10;    &quot;prisma:generate&quot;: &quot;prisma generate&quot;,&#10;    &quot;prisma:migrate&quot;: &quot;prisma migrate dev --name init&quot;,&#10;    &quot;prisma:seed&quot;: &quot;node prisma/seed.js&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@prisma/client&quot;: &quot;^6.16.2&quot;,&#10;    &quot;@radix-ui/react-accordion&quot;: &quot;^1.2.12&quot;,&#10;    &quot;@radix-ui/react-dialog&quot;: &quot;^1.1.15&quot;,&#10;    &quot;@radix-ui/react-label&quot;: &quot;^2.1.7&quot;,&#10;    &quot;@radix-ui/react-slot&quot;: &quot;^1.2.3&quot;,&#10;    &quot;@radix-ui/react-tabs&quot;: &quot;^1.1.13&quot;,&#10;    &quot;class-variance-authority&quot;: &quot;^0.7.1&quot;,&#10;    &quot;clsx&quot;: &quot;^2.1.1&quot;,&#10;    &quot;date-fns&quot;: &quot;^4.1.0&quot;,&#10;    &quot;jose&quot;: &quot;^6.1.0&quot;,&#10;    &quot;lucide-react&quot;: &quot;^0.544.0&quot;,&#10;    &quot;next&quot;: &quot;15.5.4&quot;,&#10;    &quot;next-auth&quot;: &quot;^4.24.11&quot;,&#10;    &quot;next-intl&quot;: &quot;^4.3.9&quot;,&#10;    &quot;postcss&quot;: &quot;^8.5.6&quot;,&#10;    &quot;prettier&quot;: &quot;^3.6.2&quot;,&#10;    &quot;prettier-plugin-tailwindcss&quot;: &quot;^0.6.14&quot;,&#10;    &quot;prisma&quot;: &quot;^6.16.2&quot;,&#10;    &quot;react&quot;: &quot;19.1.0&quot;,&#10;    &quot;react-day-picker&quot;: &quot;^9.11.0&quot;,&#10;    &quot;react-dom&quot;: &quot;19.1.0&quot;,&#10;    &quot;tailwind&quot;: &quot;^4.0.0&quot;,&#10;    &quot;tailwind-merge&quot;: &quot;^3.3.1&quot;,&#10;    &quot;zod&quot;: &quot;^4.1.11&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@eslint/eslintrc&quot;: &quot;^3&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4.1.13&quot;,&#10;    &quot;@types/node&quot;: &quot;^20&quot;,&#10;    &quot;@types/react&quot;: &quot;^19&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^19&quot;,&#10;    &quot;eslint&quot;: &quot;^9&quot;,&#10;    &quot;eslint-config-next&quot;: &quot;15.5.4&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^4.1.13&quot;,&#10;    &quot;tw-animate-css&quot;: &quot;^1.4.0&quot;,&#10;    &quot;typescript&quot;: &quot;^5&quot;&#10;  },&#10;  &quot;prisma&quot;: {&#10;    &quot;seed&quot;: &quot;node prisma/seed.js&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/prisma/schema.prisma">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/prisma/schema.prisma" />
              <option name="updatedContent" value="// Prisma schema for wedding website&#10;// Using Neon Postgres via DATABASE_URL&#10;&#10;generator client {&#10;  provider = &quot;prisma-client-js&quot;&#10;}&#10;&#10;datasource db {&#10;  provider = &quot;postgresql&quot;&#10;  url      = env(&quot;DATABASE_URL&quot;)&#10;}&#10;&#10;enum Language {&#10;  en&#10;  ko&#10;  no&#10;}&#10;&#10;enum RsvpStatus {&#10;  yes&#10;  no&#10;  maybe&#10;}&#10;&#10;model Invite {&#10;  id         String      @id @default(uuid())&#10;  guestName  String?&#10;  language   Language?   @default(en)&#10;  rsvpStatus RsvpStatus?&#10;  createdAt  DateTime    @default(now())&#10;  updatedAt  DateTime    @updatedAt&#10;  rsvps      Rsvp[]&#10;}&#10;&#10;// Historical RSVP submissions (optional usage)&#10;model Rsvp {&#10;  id        String     @id @default(uuid())&#10;  inviteId  String&#10;  invite    Invite     @relation(fields: [inviteId], references: [id], onDelete: Cascade)&#10;  name      String&#10;  status    RsvpStatus&#10;  createdAt DateTime   @default(now())&#10;&#10;  @@index([inviteId])&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/prisma/seed.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/prisma/seed.js" />
              <option name="updatedContent" value="// Prisma seed script to populate initial invite records&#10;const { PrismaClient } = require('@prisma/client');&#10;const prisma = new PrismaClient();&#10;&#10;async function main() {&#10;  const invites = [&#10;    { id: '0d44434f-e193-49ea-bdc2-3d3f6deab3ab', guestName: 'Chris', language: 'en' },&#10;    { id: '3663d23a-771b-44c8-b41a-a6ebea727427', guestName: 'Scarlett', language: 'ko' },&#10;    { id: 'f8234976-a9a7-4d86-a02f-9539c0307d33', guestName: 'Vikors', language: 'no' },&#10;  ];&#10;&#10;  for (const data of invites) {&#10;    await prisma.invite.upsert({&#10;      where: { id: data.id },&#10;      update: data,&#10;      create: data,&#10;    });&#10;  }&#10;  console.log(`Seeded ${invites.length} invites`);&#10;}&#10;&#10;main()&#10;  .catch((e) =&gt; {&#10;    console.error(e);&#10;    process.exit(1);&#10;  })&#10;  .finally(async () =&gt; {&#10;    await prisma.$disconnect();&#10;  });&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/actions/rsvp.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/actions/rsvp.ts" />
              <option name="originalContent" value="'use server';&#10;export async function submitRSVP(formData: FormData) {&#10;  const inviteId = String(formData.get('inviteId') ?? '');&#10;  const name = String(formData.get('name') ?? '').trim();&#10;  /*  const attending = String(formData.get('attending') ?? '') === 'yes';&#10;  const guests = Number(formData.get('guests') ?? 0);&#10;  const note = String(formData.get('note') ?? '').trim();*/&#10;&#10;  if (!inviteId || !name) {&#10;    return { ok: false as const, error: 'Missing invite or name' };&#10;  }&#10;&#10;  return { ok: true as const };&#10;}&#10;" />
              <option name="updatedContent" value="'use server';&#10;import { prisma } from '@/lib/prisma';&#10;import { inviteIdSchema } from '@/lib/invites';&#10;import { z } from 'zod';&#10;&#10;const rsvpSchema = z.union([z.literal('yes'), z.literal('no'), z.literal('maybe')]);&#10;&#10;export async function submitRSVP(formData: FormData) {&#10;  const inviteId = String(formData.get('inviteId') ?? '').trim();&#10;  const name = String(formData.get('name') ?? '').trim();&#10;  const statusRaw = String(formData.get('status') ?? '').trim();&#10;&#10;  if (!inviteIdSchema.safeParse(inviteId).success) {&#10;    return { ok: false as const, error: 'Invalid invite id' };&#10;  }&#10;  if (!name) {&#10;    return { ok: false as const, error: 'Missing name' };&#10;  }&#10;  const statusParse = rsvpSchema.safeParse(statusRaw);&#10;  if (!statusParse.success) {&#10;    return { ok: false as const, error: 'Invalid status' };&#10;  }&#10;  const status = statusParse.data; // now definitely 'yes' | 'no' | 'maybe'&#10;&#10;  try {&#10;    const updated = await prisma.invite.update({&#10;      where: { id: inviteId },&#10;      data: { guestName: name, rsvpStatus: status },&#10;    });&#10;&#10;    await prisma.rsvp.create({ data: { inviteId: updated.id, name, status } });&#10;&#10;    return { ok: true as const };&#10;  } catch (err: unknown) {&#10;    let code: string | undefined;&#10;    if (typeof err === 'object' &amp;&amp; err !== null &amp;&amp; 'code' in err) {&#10;      code = (err as { code?: string }).code;&#10;    }&#10;    if (code === 'P2025') {&#10;      return { ok: false as const, error: 'Invite not found' };&#10;    }&#10;    console.error('RSVP submit failed', err);&#10;    return { ok: false as const, error: 'Server error' };&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/page.tsx" />
              <option name="originalContent" value="import Link from 'next/link';&#10;import { readSessionFromCookie } from '@/lib/auth';&#10;&#10;export default async function AdminPage() {&#10;  const session = await readSessionFromCookie();&#10;&#10;  return (&#10;    &lt;main style={{ padding: 24 }}&gt;&#10;      &lt;h1&gt;Admin&lt;/h1&gt;&#10;      &lt;p&gt;Session: {session ? '✅ logged in' : '❌ not logged in'}&lt;/p&gt;&#10;      &lt;nav style={{ display: 'grid', gap: 8, marginTop: 16 }}&gt;&#10;        &lt;Link href=&quot;/wedding&quot;&gt;Public wedding info&lt;/Link&gt;&#10;        &lt;Link href=&quot;/wedding-invite&quot;&gt;Example invite&lt;/Link&gt;&#10;        {session ? &lt;a href=&quot;/api/logout&quot;&gt;Logout&lt;/a&gt; : &lt;Link href=&quot;/login/&quot;&gt;Login&lt;/Link&gt;}&#10;      &lt;/nav&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import Link from 'next/link';&#10;import { readSessionFromCookie } from '@/lib/auth';&#10;import { listInvites } from '@/lib/invites';&#10;&#10;export default async function AdminPage() {&#10;  const session = await readSessionFromCookie();&#10;  const invites = await listInvites();&#10;&#10;  return (&#10;    &lt;main style={{ padding: 24 }}&gt;&#10;      &lt;h1&gt;Admin&lt;/h1&gt;&#10;      &lt;p&gt;Session: {session ? '✅ logged in' : '❌ not logged in'}&lt;/p&gt;&#10;      &lt;nav style={{ display: 'grid', gap: 8, marginTop: 16 }}&gt;&#10;        &lt;Link href=&quot;/wedding&quot;&gt;Public wedding info&lt;/Link&gt;&#10;        &lt;Link href=&quot;/wedding-invite&quot;&gt;Example invite&lt;/Link&gt;&#10;        {session ? &lt;a href=&quot;/api/logout&quot;&gt;Logout&lt;/a&gt; : &lt;Link href=&quot;/login/&quot;&gt;Login&lt;/Link&gt;}&#10;      &lt;/nav&gt;&#10;&#10;      &lt;section style={{ marginTop: 40 }}&gt;&#10;        &lt;h2&gt;Invites&lt;/h2&gt;&#10;        &lt;div style={{ display: 'grid', gap: 8, marginTop: 12 }}&gt;&#10;          {invites.map((inv) =&gt; (&#10;            &lt;div key={inv.id} style={{ padding: 12, border: '1px solid #ddd', borderRadius: 8 }}&gt;&#10;              &lt;code style={{ fontSize: 12 }}&gt;{inv.id}&lt;/code&gt;&#10;              &lt;div style={{ display: 'flex', gap: 12, marginTop: 4, fontSize: 14 }}&gt;&#10;                &lt;span&gt;Name: {inv.guestName || '—'}&lt;/span&gt;&#10;                &lt;span&gt;Lang: {inv.language || '—'}&lt;/span&gt;&#10;                &lt;span&gt;RSVP: {inv.rsvp || '—'}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;Link href={`/wedding-invite/${inv.id}`} style={{ fontSize: 12, color: '#2563eb' }}&gt;&#10;                Open invite&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;          {!invites.length &amp;&amp; &lt;p&gt;No invites yet.&lt;/p&gt;}&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/wedding-invite/_components/RsvpDialog.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/wedding-invite/_components/RsvpDialog.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogTrigger,&#10;} from '@/components/ui/dialog';&#10;&#10;import { Input } from '@/components/ui/input';&#10;import { Button } from '@/components/ui/button';&#10;import { useState } from 'react';&#10;import { useTranslations } from 'next-intl';&#10;&#10;type Props = { inviteId: string; guestName?: string };&#10;&#10;export function RsvpDialog({ inviteId, guestName }: Props) {&#10;  const [name, setName] = useState(guestName ?? '');&#10;  const [status, setStatus] = useState&lt;'yes' | 'no' | 'maybe'&gt;('yes');&#10;  const t = useTranslations('WeddingInvite');&#10;&#10;  async function submit() {&#10;    console.log({ inviteId, name, status });&#10;    alert(t('RSVP_ALERT'));&#10;  }&#10;&#10;  return (&#10;    &lt;Dialog&gt;&#10;      &lt;DialogTrigger asChild&gt;&#10;        &lt;Button className=&quot;px-6&quot;&gt;{t('RSVP_OPEN_BUTTON')}&lt;/Button&gt;&#10;      &lt;/DialogTrigger&gt;&#10;      &lt;DialogContent className=&quot;sm:max-w-md&quot;&gt;&#10;        &lt;DialogHeader&gt;&#10;          &lt;DialogTitle&gt;{t('RSVP_DIALOG_TITLE')}&lt;/DialogTitle&gt;&#10;        &lt;/DialogHeader&gt;&#10;        &lt;div className=&quot;space-y-3&quot;&gt;&#10;          &lt;Input&#10;            placeholder={t('RSVP_NAME_PLACEHOLDER')}&#10;            value={name}&#10;            onChange={(e) =&gt; setName(e.target.value)}&#10;          /&gt;&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            {(['yes', 'maybe', 'no'] as const).map((s) =&gt; {&#10;              const labelKey =&#10;                s === 'yes'&#10;                  ? 'RSVP_STATUS_YES'&#10;                  : s === 'maybe'&#10;                    ? 'RSVP_STATUS_MAYBE'&#10;                    : 'RSVP_STATUS_NO';&#10;              return (&#10;                &lt;Button&#10;                  key={s}&#10;                  variant={status === s ? 'default' : 'outline'}&#10;                  onClick={() =&gt; setStatus(s)}&#10;                  className=&quot;flex-1&quot;&#10;                &gt;&#10;                  {t(labelKey)}&#10;                &lt;/Button&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;          &lt;Button onClick={submit} className=&quot;w-full&quot;&gt;&#10;            {t('RSVP_SUBMIT')}&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogTrigger,&#10;} from '@/components/ui/dialog';&#10;&#10;import { Input } from '@/components/ui/input';&#10;import { Button } from '@/components/ui/button';&#10;import { useState } from 'react';&#10;import { useTranslations } from 'next-intl';&#10;import { submitRSVP } from '@/actions/rsvp';&#10;&#10;type Props = { inviteId: string; guestName?: string };&#10;&#10;export function RsvpDialog({ inviteId, guestName }: Props) {&#10;  const [name, setName] = useState(guestName ?? '');&#10;  const [status, setStatus] = useState&lt;'yes' | 'no' | 'maybe'&gt;('yes');&#10;  const [loading, setLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const t = useTranslations('WeddingInvite');&#10;&#10;  async function submit() {&#10;    setLoading(true);&#10;    setError(null);&#10;    try {&#10;      const fd = new FormData();&#10;      fd.set('inviteId', inviteId);&#10;      fd.set('name', name);&#10;      fd.set('status', status);&#10;      const res = await submitRSVP(fd);&#10;      if (!res.ok) {&#10;        setError(res.error ?? 'Error');&#10;        return;&#10;      }&#10;      alert(t('RSVP_ALERT'));&#10;    } catch {&#10;      setError('Network error');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;Dialog&gt;&#10;      &lt;DialogTrigger asChild&gt;&#10;        &lt;Button className=&quot;px-6&quot;&gt;{t('RSVP_OPEN_BUTTON')}&lt;/Button&gt;&#10;      &lt;/DialogTrigger&gt;&#10;      &lt;DialogContent className=&quot;sm:max-w-md&quot;&gt;&#10;        &lt;DialogHeader&gt;&#10;          &lt;DialogTitle&gt;{t('RSVP_DIALOG_TITLE')}&lt;/DialogTitle&gt;&#10;        &lt;/DialogHeader&gt;&#10;        &lt;div className=&quot;space-y-3&quot;&gt;&#10;          &lt;Input&#10;            placeholder={t('RSVP_NAME_PLACEHOLDER')}&#10;            value={name}&#10;            onChange={(e) =&gt; setName(e.target.value)}&#10;          /&gt;&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            {(['yes', 'maybe', 'no'] as const).map((s) =&gt; {&#10;              const labelKey =&#10;                s === 'yes'&#10;                  ? 'RSVP_STATUS_YES'&#10;                  : s === 'maybe'&#10;                    ? 'RSVP_STATUS_MAYBE'&#10;                    : 'RSVP_STATUS_NO';&#10;              return (&#10;                &lt;Button&#10;                  key={s}&#10;                  variant={status === s ? 'default' : 'outline'}&#10;                  onClick={() =&gt; setStatus(s)}&#10;                  className=&quot;flex-1&quot;&#10;                &gt;&#10;                  {t(labelKey)}&#10;                &lt;/Button&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;          &lt;Button onClick={submit} className=&quot;w-full&quot; disabled={loading || !name}&gt;&#10;            {loading ? '...' : t('RSVP_SUBMIT')}&#10;          &lt;/Button&gt;&#10;          {error &amp;&amp; &lt;p className=&quot;text-xs text-red-600&quot;&gt;{error}&lt;/p&gt;}&#10;        &lt;/div&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/wedding-invite/components/KakaoMap.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/wedding-invite/components/KakaoMap.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import React, { useEffect, useRef, useState } from &quot;react&quot;;&#10;&#10;declare global { interface Window { kakao?: any; } }&#10;&#10;const SDK_ID = &quot;kakao-maps-sdk&quot;;&#10;&#10;function loadKakao(appKey?: string) {&#10;    return new Promise&lt;void&gt;((resolve, reject) =&gt; {&#10;        try {&#10;            if (typeof window === &quot;undefined&quot;) return;&#10;            if (window.kakao &amp;&amp; window.kakao.maps) return resolve();&#10;            const existing = document.getElementById(SDK_ID) as HTMLScriptElement | null;&#10;            if (existing) {&#10;                existing.addEventListener(&quot;load&quot;, () =&gt; window.kakao.maps.load(resolve));&#10;                return;&#10;            }&#10;            const script = document.createElement(&quot;script&quot;);&#10;            script.id = SDK_ID;&#10;            const key = appKey || process.env.NEXT_PUBLIC_KAKAO_JS_KEY;&#10;            const query = key ? `?appkey=${key}&amp;autoload=false` : &quot;?autoload=false&quot;;&#10;            script.src = `https://dapi.kakao.com/v2/maps/sdk.js${query}`;&#10;            script.async = true;&#10;            script.addEventListener(&quot;load&quot;, () =&gt; {&#10;                if (!window.kakao) return reject(new Error(&quot;Kakao not available&quot;));&#10;                window.kakao.maps.load(resolve);&#10;            });&#10;            script.addEventListener(&quot;error&quot;, () =&gt; reject(new Error(&quot;Failed to load Kakao SDK&quot;)));&#10;            document.head.appendChild(script);&#10;        } catch (e) { reject(e as any); }&#10;    });&#10;}&#10;&#10;export default function KakaoMap({ lat, lng, level = 3, marker = true, appKey }: {&#10;    lat: number; lng: number; level?: number; marker?: boolean; appKey?: string;&#10;}) {&#10;    const ref = useRef&lt;HTMLDivElement&gt;(null);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        let map: any; let mk: any;&#10;        loadKakao(appKey)&#10;            .then(() =&gt; {&#10;                if (!ref.current) return;&#10;                const center = new window.kakao.maps.LatLng(lat, lng);&#10;                map = new window.kakao.maps.Map(ref.current, { center, level });&#10;                if (marker) mk = new window.kakao.maps.Marker({ position: center, map });&#10;            })&#10;            .catch((e) =&gt; setError((e as Error).message));&#10;        return () =&gt; { if (mk) mk.setMap(null); if (map) map = null; };&#10;    }, [lat, lng, level, marker, appKey]);&#10;&#10;    if (error) return &lt;div className=&quot;h-60 w-full bg-gray-100 p-4 text-center text-sm text-red-600&quot;&gt;Map error: {error}&lt;/div&gt;;&#10;    return &lt;div ref={ref} className=&quot;h-60 w-full&quot; /&gt;;&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;import React, { useEffect, useRef, useState } from &quot;react&quot;;&#13;&#10;&#13;&#10;declare global { interface Window { kakao?: any; } }&#13;&#10;&#13;&#10;const SDK_ID = &quot;kakao-maps-sdk&quot;;&#13;&#10;&#13;&#10;function loadKakao(appKey?: string) {&#13;&#10;    return new Promise&lt;void&gt;((resolve, reject) =&gt; {&#13;&#10;        try {&#13;&#10;            if (typeof window === &quot;undefined&quot;) return;&#13;&#10;            if (window.kakao &amp;&amp; window.kakao.maps) return resolve();&#13;&#10;            const existing = document.getElementById(SDK_ID) as HTMLScriptElement | null;&#13;&#10;            if (existing) {&#13;&#10;                existing.addEventListener(&quot;load&quot;, () =&gt; window.kakao.maps.load(resolve));&#13;&#10;                return;&#13;&#10;            }&#13;&#10;            const script = document.createElement(&quot;script&quot;);&#13;&#10;            script.id = SDK_ID;&#13;&#10;            const key = appKey || process.env.NEXT_PUBLIC_KAKAO_JS_KEY;&#13;&#10;            const query = key ? `?appkey=${key}&amp;autoload=false` : &quot;?autoload=false&quot;;&#13;&#10;            script.src = `https://dapi.kakao.com/v2/maps/sdk.js${query}`;&#13;&#10;            script.async = true;&#13;&#10;            script.addEventListener(&quot;load&quot;, () =&gt; {&#13;&#10;                if (!window.kakao) return reject(new Error(&quot;Kakao not available&quot;));&#13;&#10;                window.kakao.maps.load(resolve);&#13;&#10;            });&#13;&#10;            script.addEventListener(&quot;error&quot;, () =&gt; reject(new Error(&quot;Failed to load Kakao SDK&quot;)));&#13;&#10;            document.head.appendChild(script);&#13;&#10;        } catch (e) { reject(e as any); }&#13;&#10;    });&#13;&#10;}&#13;&#10;&#13;&#10;export default function KakaoMap({ lat, lng, level = 3, marker = true, appKey }: {&#13;&#10;    lat: number; lng: number; level?: number; marker?: boolean; appKey?: string;&#13;&#10;}) {&#13;&#10;    const ref = useRef&lt;HTMLDivElement&gt;(null);&#13;&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#13;&#10;&#13;&#10;    useEffect(() =&gt; {&#13;&#10;        let map: any; let mk: any;&#13;&#10;        loadKakao(appKey)&#13;&#10;            .then(() =&gt; {&#13;&#10;                if (!ref.current) return;&#13;&#10;                const center = new window.kakao.maps.LatLng(lat, lng);&#13;&#10;                map = new window.kakao.maps.Map(ref.current, { center, level });&#13;&#10;                if (marker) mk = new window.kakao.maps.Marker({ position: center, map });&#13;&#10;            })&#13;&#10;            .catch((e) =&gt; setError((e as Error).message));&#13;&#10;        return () =&gt; { if (mk) mk.setMap(null); if (map) map = null; };&#13;&#10;    }, [lat, lng, level, marker, appKey]);&#13;&#10;&#13;&#10;    if (error) return &lt;div className=&quot;h-60 w-full bg-gray-100 p-4 text-center text-sm text-red-600&quot;&gt;Map error: {error}&lt;/div&gt;;&#13;&#10;    return (&#13;&#10;        &lt;div className=&quot;relative h-56 w-full bg-[linear-gradient(135deg,#2b2b2b,#000)] text-white flex items-center justify-center&quot;&gt;&#13;&#10;            &lt;div className=&quot;text-center text-xs&quot;&gt;&#13;&#10;                &lt;div className=&quot;text-[0.65rem] tracking-widest text-[#b1b1b1] mb-1&quot;&gt;MAP PLACEHOLDER&lt;/div&gt;&#13;&#10;                &lt;div&gt;Lat: {lat.toFixed(5)}&lt;/div&gt;&#13;&#10;                &lt;div&gt;Lng: {lng.toFixed(5)}&lt;/div&gt;&#13;&#10;                &lt;div className=&quot;mt-2 flex justify-center gap-2 text-[0.6rem] opacity-70&quot;&gt;&#13;&#10;                    &lt;span&gt;NEED KAKAO SDK&lt;/span&gt;&#13;&#10;                    &lt;span&gt;·&lt;/span&gt;&#13;&#10;                    &lt;span&gt;TO INTEGRATE&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;    );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/invites.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/invites.ts" />
              <option name="originalContent" value="import { notFound } from 'next/navigation';&#10;import { z } from 'zod';&#10;&#10;export const inviteIdSchema = z.string().uuid();&#10;&#10;export type Invite = {&#10;  id: string;&#10;  guestName?: string;&#10;  language?: 'en' | 'ko' | 'no';&#10;  rsvp?: 'yes' | 'no' | 'maybe';&#10;};&#10;&#10;&#10;const MOCK_INVITES: Invite[] = [&#10;  { id: '0d44434f-e193-49ea-bdc2-3d3f6deab3ab', guestName: 'Chris', language: 'en' },&#10;  { id: '3663d23a-771b-44c8-b41a-a6ebea727427', guestName: 'Scarlett', language: 'ko' },&#10;  { id: 'f8234976-a9a7-4d86-a02f-9539c0307d33', guestName: 'Vikors', language: 'no' },&#10;  // 2) lookup (replace with DB)&#10;  const hit = MOCK_INVITES.find((i) =&gt; i.id === inviteId);&#10;  if (!hit) notFound();&#10;&#10;  return hit;&#10;  return {&#10;    id: record.id,&#10;    guestName: record.guestName,&#10;    guestName: r.guestName ?? undefined,&#10;    language: r.language ?? undefined,&#10;    rsvp: r.rsvpStatus ?? undefined,&#10;  }));&#10;}&#10;" />
              <option name="updatedContent" value="import { notFound } from 'next/navigation';&#10;import { z } from 'zod';&#10;import { prisma } from '@/lib/prisma';&#10;&#10;export const inviteIdSchema = z.string().uuid();&#10;&#10;export type Invite = {&#10;  id: string;&#10;  guestName?: string; // nulls normalized to undefined&#10;  language?: 'en' | 'ko' | 'no';&#10;  rsvp?: 'yes' | 'no' | 'maybe';&#10;};&#10;&#10;export async function getInviteOr404(inviteId: string): Promise&lt;Invite&gt; {&#10;  const parsed = inviteIdSchema.safeParse(inviteId);&#10;  if (!parsed.success) notFound();&#10;&#10;  const record = await prisma.invite.findUnique({ where: { id: inviteId } });&#10;  if (!record) notFound();&#10;  return {&#10;    id: record.id,&#10;    guestName: record.guestName ?? undefined,&#10;    language: (record.language as Invite['language']) ?? undefined,&#10;    rsvp: (record.rsvpStatus as Invite['rsvp']) ?? undefined,&#10;  };&#10;}&#10;&#10;export async function listInvites(): Promise&lt;Invite[]&gt; {&#10;  const rows = await prisma.invite.findMany({ orderBy: { createdAt: 'desc' } });&#10;  return rows.map((r) =&gt; ({&#10;    id: r.id,&#10;    guestName: r.guestName ?? undefined,&#10;    language: (r.language as Invite['language']) ?? undefined,&#10;    rsvp: (r.rsvpStatus as Invite['rsvp']) ?? undefined,&#10;  }));&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/prisma.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/prisma.ts" />
              <option name="updatedContent" value="import { PrismaClient } from '@prisma/client';&#10;&#10;// Prevent multiple instances in dev (hot reload)&#10;const globalForPrisma = globalThis as unknown as { prisma?: PrismaClient };&#10;&#10;export const prisma =&#10;  globalForPrisma.prisma ||&#10;  new PrismaClient({&#10;    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],&#10;  });&#10;&#10;if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>